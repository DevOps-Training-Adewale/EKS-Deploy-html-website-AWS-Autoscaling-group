name: CI/CD Pipeline for EKS Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 6: Build Docker Image
    - name: Build Docker Image
      run: |
        docker build -t html-app:latest .
        docker tag html-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/html-app:latest

    # Step 7: Push Docker Image to Amazon ECR
    - name: Push Docker Image to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/html-app:latest

    # Step 3: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    # Step 4: Terraform Init & Apply (Provision EKS)
    - name: Terraform Init & Apply
      working-directory: ./terraform
      run: |
        terraform init
        terraform apply -auto-approve

    # Step 5: Set Up kubectl for EKS
    - name: Set up kubectl
      run: |
        aws eks --region us-east-1 update-kubeconfig --name my-eks-cluster

    # Step 8: Deploy to EKS
    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/deployment.yml
        kubectl apply -f k8s/service.yml

    # Step 9: Set Up Monitoring with Prometheus and Grafana
    - name: Deploy Monitoring Tools
      run: |
        kubectl apply -f k8s/prometheus.yml
        kubectl apply -f k8s/grafana.yml